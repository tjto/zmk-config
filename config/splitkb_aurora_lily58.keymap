/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#define HOST_OS 1

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <zmk-helpers/helper.h>
#include <zmk-helpers/key-labels/lily58.h>
#include <zmk-helpers/unicode-chars/swedish.dtsi>

// lily58 keymap defined in zmk-helpers/key-labels/lily58.h
// ╭────────────────────────────┬────────────────────────────╮ ╭─────────────────────────────┬─────────────────────────────╮
// │  0   1   2   3   4   5     │      6   7   8   9  10  11 │ │ LT5 LT4 LT3 LT2 LT1 LT0     │     RT0 RT1 RT2 RT3 RT4 RT5 │
// │ 12  13  14  15  16  17     │     18  19  20  21  22  23 │ │ LM5 LM4 LM3 LM2 LM1 LM0     │     RM0 RM1 RM2 RM3 RM4 RM5 │
// │ 24  25  26  27  28  29     │     30  31  32  33  34  35 │ │ LB5 LB4 LB3 LB2 LB1 LB0     │     RB0 RB1 RB2 RB3 RB4 RB5 │
// │ 36  37  38  39  40  41  42 │ 43  44  45  46  47  48  49 │ │ LF5 LF4 LF3 LF2 LF1 LF0 LEC │ REC RF0 RF1 RF2 RF3 RF4 RF5 │
// ╰───────────╮ 50  51  52  53 │ 54  55  56  57 ╭───────────╯ ╰───────────╮ LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3 ╭───────────╯
//             ╰────────────────┴────────────────╯                         ╰─────────────────┴─────────────────╯             */
//

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 LF0 LF1 LF2 LF3 LF4 LF5 LEC // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 RF0 RF1 RF2 RF3 RF4 RF5 REC // right-hand keys
#define THUMBS LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3                                                                     // thumb keys

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

ZMK_COMBO(esc,&kp ESC,  LM1 LM2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(bspc,&kp BSPC,RM1 RM2, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)
ZMK_COMBO(del, &kp DEL, RM0 RM1, ALL, COMBO_TERM_FAST, COMBO_IDLE_FAST)

/* left-hand HRMs */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)


// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| CAPS  | GUI   |
ZMK_LAYER(default_layer,
    &kp ESC   &kp N1       &kp N2        &kp N3         &kp N4           &kp N5                     &kp N6 &kp N7           &kp N8          &kp N9         &kp N0         &kp GRAVE
    &kp TAB   &kp Q        &kp W         &kp E          &kp R            &kp T                      &kp Y  &kp U            &kp I           &kp O          &kp P          &kp MINUS
    &kp LCTRL &hml LGUI A  &hml LCTRL S  &hml LALT D    &hml LSHIFT F    &kp G                      &kp H  &hmr RSHIFT J    &hmr RALT K     &hmr RCTRL L   &hmr RGUI SEMI &kp SQT
    &kp LSHFT &kp Z        &kp X         &kp C          &kp V            &kp B  &kp LBKT   &kp RBKT &kp N  &kp M            &kp COMMA       &kp DOT        &kp FSLH       &kp EQUAL
                                         &caps_word     &mo 1            &mo 1  &kp SPACE  &kp RET  &mo 2  &mo 2            &caps_word
)

// ------------------------------------------------------------------------------------------------------------
// | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |  BSPC |
// |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
// |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
// |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
//                     |      |      |      |        |  |       |      |       |       |
ZMK_LAYER(lower_layer,
    &bt BT_CLR &bt BT_SEL 0     &bt BT_SEL 1      &bt BT_SEL 2      &bt BT_SEL 3 &bt BT_SEL 4                 &trans    &trans    &trans          &trans    &trans    &kp BSPC
    &kp GRAVE  &kp EXCL         &kp AT            &kp HASH          &kp DOLLAR   &kp PRCNT                    &kp CARET &kp AMPS  &kp STAR        &kp LPAR  &kp RPAR  &kp TILDE
    &trans     &trans           &trans            &kp LBKT          &kp LBRC     &kp BSLH                     &kp PIPE  &kp RBRC  &kp RBKT        &trans    &trans    &trans
    &trans     &ext_power EP_ON &ext_power EP_OFF &ext_power EP_TOG &trans       &trans    &trans   &trans    &trans    &kp MINUS &kp PLUS        &kp LBRC  &kp RBRC  &kp PIPE
                                                  &trans            &trans       &trans    &trans   &kp BSPC  &trans    &trans    &trans
)

// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                   |      |       |       |      |       |       |
// |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
// |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  <-  |   v   |   ^   |  ->  |       |       |
// |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
//                     |      |      |      |        |  |       |      |       |       |
ZMK_LAYER(raise_layer,
    &kp F1    &kp F2    &kp F3    &kp F4     &kp F5   &kp F6                       &kp F7      &kp F8    &kp F9    &kp F10   &kp F11   &kp F12
    &kp GRAVE &kp N1    &kp N2    &kp N3     &kp N4   &kp N5                       &kp N6      &kp N7    &kp N8    &kp N9    &kp N0    &trans
    &trans    &sv_ae    &sv_ao    &sv_oe     &trans   &trans                       &kp LEFT    &kp DOWN  &kp UP    &kp RIGHT &trans    &trans
    &trans    &trans    &trans    &trans     &trans   &trans   &trans    &trans    &kp KP_PLUS &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT  &kp BSLH
                                  &trans     &trans   &trans   &kp BSPC  &trans    &trans      &trans    &trans
)
